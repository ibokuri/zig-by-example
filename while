<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: While</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'slices';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'for';
          }
          
      }
  </script>
  <body>
    <div class="example" id="while">
      <h2><a href="./">Zig by Example</a>: While</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>While</em> loops can be used to repeat expressions.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="http://zig.fly.dev/p/NWDAi0L1wmZ"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">d</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The body of a while loop will repeatedly execute until the loop&rsquo;s
condition is no longer true.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;a: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">a</span><span class="p">});</span><span class="w">
</span><span class="w">        </span><span class="n">a</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><em>Continue expressions</em> can be used to evaluate an expression after each
execution of a while loop&rsquo;s body.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;b: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">b</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can specify multiple continue expressions by using the <code>{ &lt;expr1&gt;; &lt;expr2&gt;; ... }</code> syntax.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">({</span><span class="w">
</span><span class="w">        </span><span class="n">c</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="n">c</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;c: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">c</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To break out of a while loop, use the <code>break</code> keyword.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">break</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To jump to the next iteration of a while loop, use the <code>continue</code>
keyword.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">d</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;d: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">d</span><span class="p">});</span><span class="w">
</span><span class="w">            </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="w">        </span><span class="k">break</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run while.zig
<span class="go">a: 0
</span><span class="go">a: 1
</span><span class="go">b: 0
</span><span class="go">b: 1
</span><span class="go">c: 0
</span><span class="go">c: 2
</span><span class="go">d: 0
</span><span class="go">d: 1</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="for">For</a>.
      </p>
      

    <p class="footer">
      by <a href="https://github.com/ibokuri">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000Aconst print \u003D std.debug.print;\u000A');codeLines.push('pub fn main() !void {\u000A    var a: usize \u003D 0;\u000A    var b: usize \u003D 0;\u000A    var c: usize \u003D 0;\u000A    var d: usize \u003D 0;\u000A');codeLines.push('    while (a \u003C 2) {\u000A        print(\"a: {}\\n\", .{a});\u000A        a +\u003D 1;\u000A    }\u000A');codeLines.push('    while (b \u003C 2) : (b +\u003D 1) {\u000A        print(\"b: {}\\n\", .{b});\u000A    }\u000A');codeLines.push('    while (c \u003C 4) : ({\u000A        c +\u003D 1;\u000A        c +\u003D 1;\u000A    }) {\u000A        print(\"c: {}\\n\", .{c});\u000A    }\u000A');codeLines.push('    while (true) {\u000A        break;\u000A    }\u000A');codeLines.push('    while (true) : (d +\u003D 1) {\u000A        if (d \u003C 2) {\u000A            print(\"d: {}\\n\", .{d});\u000A            continue;\u000A        }\u000A');codeLines.push('        break;\u000A    }\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
