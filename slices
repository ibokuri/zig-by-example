<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: Slices</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'pointers';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'while';
          }
          
      }
  </script>
  <body>
    <div class="example" id="slices">
      <h2><a href="./">Zig by Example</a>: Slices</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>A <em>slice</em> is a pointer that references a contiguous subset of elements in a
sequence.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The easiest way to understand slices is to think of them as a pointer plus a
length. The pointer tells you where the slice begins and the length tells
you the size of the slice.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[]</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">anyerror</span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Slices are made with the slicing syntax: <code>[start..len]</code>.
Here, <code>slice</code> points to <code>array[0]</code> and has a length of 3.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">len</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">array</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">i32</span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="n">len</span><span class="p">];</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Even though slices are pointers, you can essentially treat them like
arrays. You can access their length, index into them, and iterate over
them.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;length: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">slice</span><span class="p">.</span><span class="n">len</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;access: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">slice</span><span class="p">[</span><span class="mi">0</span><span class="p">]});</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">slice</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="n">elem</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;elem: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">elem</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Note that a slice&rsquo;s length is always a runtime-known value. Here, we are
<em>not</em> creating a slice, but rather a pointer to an array of three <code>i32</code>
values. The reason is because we sliced <code>array</code> using compile-time known
values (<code>comptime_int</code>s).</p>

          </td>
          <td class="code">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">3</span><span class="p">];</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;type: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="nb">@TypeOf</span><span class="p">(</span><span class="n">ptr</span><span class="p">)});</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run slices.zig
<span class="go">length: 3
</span><span class="go">access: 1
</span><span class="go">elem: 1
</span><span class="go">elem: 2
</span><span class="go">elem: 3
</span><span class="go">type: *[3]i32</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="while">While</a>.
      </p>
      

    <p class="footer">
      by <a href="https://github.com/ibokuri">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000Aconst print \u003D std.debug.print;\u000A');codeLines.push('const Slice \u003D []bool;\u000A');codeLines.push('pub fn main() anyerror!void {\u000A');codeLines.push('    var len: usize \u003D 3;\u000A    var array \u003D [5]i32{ 1, 2, 3, 4, 5 };\u000A    var slice \u003D array[0..len];\u000A');codeLines.push('    print(\"length: {}\\n\", .{slice.len});\u000A    print(\"access: {}\\n\", .{slice[0]});\u000A    for (slice) |elem| {\u000A        print(\"elem: {}\\n\", .{elem});\u000A    }\u000A');codeLines.push('    var ptr \u003D array[0..3];\u000A    print(\"type: {}\\n\", .{@TypeOf(ptr)});\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
