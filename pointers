<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: Pointers</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'arrays';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'slices';
          }
          
      }
  </script>
  <body>
    <div class="example" id="pointers">
      <h2><a href="./">Zig by Example</a>: Pointers</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Pointers</em> are objects that store a memory address.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><em>Single-item pointers</em> point to exactly one value.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Single</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><em>Many-item pointers</em> point to an unknown number of values. Unless you&rsquo;re
interfacing with C code, you probably won&rsquo;t use these types of pointers, so
we&rsquo;ll skip over them.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Many</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>All pointers in Zig point to a non-<code>null</code> value. To define a <code>null</code> pointer,
you must make the pointer type
<a href="https://zig-by-example.com/optionals">optional</a>.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Null</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">?*</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To create a single-item pointer, use the <code>&amp;</code> operator.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">ptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">v</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;pointer: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">});</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To access the value located at the memory address stored by a
single-item pointer, use the <code>*</code> operator.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;value: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="p">});</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>If a <em>pointer</em> is <code>const</code>, the value of its pointee can be modified, but
the pointee itself cannot be re-assigned.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">const_ptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">v</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">const_ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>If a <em>pointee</em> is <code>const</code>, its pointer type will reflect that. The value
of <code>const</code> pointees cannot be modified, but the pointee itself can be
re-assigned.</p>

          </td>
          <td class="code">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">cf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">ct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">ptr_to_const</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kr">const</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">cf</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">ptr_to_const</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ct</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run pointers.zig
<span class="go">pointer: bool@7ff7b26e24a7
</span><span class="go">value: true</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="slices">Slices</a>.
      </p>
      

    <p class="footer">
      by <a href="https://github.com/ibokuri">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000Aconst print \u003D std.debug.print;\u000A');codeLines.push('const Single \u003D *bool;\u000A');codeLines.push('const Many \u003D [*]bool;\u000A');codeLines.push('const Null \u003D ?*bool;\u000A');codeLines.push('pub fn main() !void {\u000A');codeLines.push('    var v \u003D false;\u000A    var ptr: *bool \u003D \u0026v;\u000A    print(\"pointer: {}\\n\", .{ptr});\u000A');codeLines.push('    ptr.* \u003D true;\u000A    print(\"value: {}\\n\", .{ptr.*});\u000A');codeLines.push('    const const_ptr: *bool \u003D \u0026v;\u000A    const_ptr.* \u003D false;\u000A');codeLines.push('    const cf \u003D false;\u000A    const ct \u003D true;\u000A    var ptr_to_const: *const bool \u003D \u0026cf;\u000A    ptr_to_const \u003D \u0026ct;\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
