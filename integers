<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: Integers</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'assignment';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'floats';
          }
          
      }
  </script>
  <body>
    <div class="example" id="integers">
      <h2><a href="./">Zig by Example</a>: Integers</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Integers</em> in Zig are pretty neat.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You have your usual integer types&hellip;</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">i64</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">100</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">d</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1_000</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>But you also have arbitrary bit-width integers.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">e</span><span class="o">:</span><span class="w"> </span><span class="n">u21</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10_000</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">f</span><span class="o">:</span><span class="w"> </span><span class="n">i42</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">100_000</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Additionally, Zig supports compile-time known integers. These have no size
limit and can be written as either integer literals or Unicode code point
literals.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">g</span><span class="o">:</span><span class="w"> </span><span class="kt">comptime_int</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1_000_000</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">integer_literal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10_000_000</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kr">const</span><span class="w"> </span><span class="n">unicode_literal</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#39;ðŸ’¯&#39;</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">anyerror</span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;integer: {}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">unicode_literal</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">print</span><span class="p">(</span><span class="s">&#34;unicode: {u}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">unicode_literal</span><span class="p">});</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run integers.zig
<span class="go">integer: 128175
</span><span class="go">unicode: ðŸ’¯</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="floats">Floats</a>.
      </p>
      

    <p class="footer">
      by <a href="https://github.com/ibokuri">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000Aconst print \u003D std.debug.print;\u000A');codeLines.push('const a: u8 \u003D 1;\u000Aconst b: i32 \u003D 10;\u000Aconst c: i64 \u003D 100;\u000Aconst d: usize \u003D 1_000;\u000A');codeLines.push('const e: u21 \u003D 10_000;\u000Aconst f: i42 \u003D 100_000;\u000A');codeLines.push('const g: comptime_int \u003D 1_000_000;\u000Aconst integer_literal \u003D 10_000_000;\u000Aconst unicode_literal \u003D \'ðŸ’¯\';\u000A');codeLines.push('pub fn main() anyerror!void {\u000A    print(\"integer: {}\\n\", .{unicode_literal});\u000A    print(\"unicode: {u}\\n\", .{unicode_literal});\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
